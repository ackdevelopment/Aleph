module gen.Generator;

import std.typecons;
import std.stdio;

import gen;
import semantics;
import syntax;

struct GeneratorCtx {
    OutputBuilder *builder;
    AlephTable table;
};

public auto generate(Tuple!(Program, AlephTable) tup, OutputStream stream)
{
    auto ctx = new GeneratorCtx(new OutputBuilder(stream), tup[1]);
    ctx.builder.printfln("/* Generated by the Aleph Compiler */");
    tup[0].route!GeneratorProvider(ctx);
    return ctx.builder;
}

template GeneratorProvider(alias Provider, Args...)
{
    auto visit(Program n, GeneratorCtx *ctx)
    {
        "in program".writeln;
        with(ctx.builder){
            foreach(ref x; n.children){
                x = x.route!GeneratorProvider(ctx);
            }
        }
        return n;
    }

    auto visit(ProcDecl node, GeneratorCtx *ctx)
    {
        with(ctx.builder){
            printfln(node);
        }
        return n;
    }

    auto visit(CallNode node, GeneratorCtx *ctx)
    {
        with(ctx.builder){
            n.toCall.route!Provider(ctx);
            untabbed({
                printf("(");
                n.arguments.headLast!((x){ x.route!Provider(ctx); printf(", "); },
                                      (k){ x.route!Provider(ctx); });
                printf(")");
            });
        }
        return node;
    }
};
