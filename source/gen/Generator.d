module gen.Generator; 

import symbol.SymbolTable;
import parse.visitors.ASTVisitor;
import parse.visitors.ASTPrinter;
import gen.GenVisitor;

import std.file;
import std.stdio;

import std.container;

class Generator {
    this(SymbolTable table, ref File output)
    {
        this.table = table;
        this.output = &output;
    }

    void generate(ASTNode node)
    {
        output.writeln("/* Generated by the Aleph compiler v0.0.1 */");
        output.writeln("#include<stdio.h>");
        output.writeln(`int main(){ puts("Hello, World"); return 0; }`);
    }
private:
    File *output;
    SymbolTable table;
    SList!string result_stack;
};
