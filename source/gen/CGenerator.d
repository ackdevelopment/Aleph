module gen.CGenerator;

import std.file;
import stdio = std.stdio;
import std.range;
import std.conv;
import std.range;
import std.algorithm;
import std.string;

import semantics;
import syntax;
import util;
import gen.TypeUtils;
public import gen.OutputBuilder;
import util.AlephException;

public auto cgenerate(Tuple)(Tuple t, OutputStream outp)
{
    return t.expand.cgenerate(outp);
}

public auto cgenerate(CProgramNode node, SymbolTable!CSymbol table, OutputStream outp)
{
    return alephErrorScope("c generator", () =>
        new CGenerator(table, new OutputBuilder(outp)).apply(node)
    );
}

private class CGenerator {
private:
    OutputBuilder *ob;
    alias ob this;
    SymbolTable!CSymbol symtab;
public:
    this(SymbolTable!CSymbol table, OutputBuilder *builder)
    {
        this.symtab = table;
        this.ob = builder;
    }

    invariant
    {
        assert(this.ob, "No output builder");
        assert(this.symtab, "No symbol table");
    }
    
    auto apply(CProgramNode node)
    {
        this.ob.printfln("/* Generated by the Aleph compiler v0.0.1 */");
        this.visit(node);
        return this.ob;
    }

    void visit(CProgramNode node)
    {
        foreach(x; node.children){
            this.visit(x);
        }
    }

    void visit(CTopLevelNode node)
    {
        node.match(
            (CFuncDeclNode func) => this.visit(func),
            (CExternFuncNode node){
                this.statement({
                    this.untabbed({
                        this.printf("extern ");
                        string inside = node.name ~ "(";
                        node.parameterTypes.headLast!(x => inside ~= x.typeString("") ~ ", ",
                                                      x => inside ~= x.typeString(""));
                        if(node.isVararg){
                            inside ~= "%s...".format(node.parameterTypes.length == 0 ? "" : ", ");
                        }
                        inside ~= ")";
                        this.printf("%s", node.returnType.typeString(inside));
                    });
                });
                this.printfln("");
            },
            (CPreprocessorNode pre){
                this.untabbed({
                    this.printfln("#%s", pre.value);
                });
                this.printfln("");
            }
        );
    }

    void visit(CFuncDeclNode node)
    {
        this.untabbed({
            string inside = node.name ~ "(";
            node.parameters.headLast!(
                    i => inside ~= ("%s, ".format(i.type.typeString(i.name))),
                    k => inside ~= ("%s".format(k.type.typeString(k.name))));
            inside ~= ")";
            import std.stdio;
            this.printf("%s %s",  node.storageClass.toString,
                                  node.returnType.typeString(inside));
        });
        this.visit(node.bodyNode);
        this.printfln("");
    }

    void visit(CBlockStatementNode node)
    {
        this.block({
            node.children.each!(x => this.visit(x));
        });
    }

    void visit(CStatementNode node)
    {
        node.match(
            (CExpressionNode n){
                this.statement({
                    this.visit(n);
                });
            },
            (CReturnNode n){
                this.statement({
                    this.printf("return ");
                    this.untabbed({
                        this.visit(n.exp);
                    });
                });
            },
            (CBlockStatementNode n) => this.visit(n),
            (CTypedefNode n) => this.visit(n),
            (CVarDeclNode n) => this.visit(n),
            (CStatementNode n){ this.printfln(";"); }
        );
    }

    void visit(CVarDeclNode node)
    {
        import std.string;
        this.statement({
            this.printf("%s %s", node.storageClass.toString, node.type.typeString(node.name));
            if(node.initVal){
                this.untabbed({
                    this.printf(" = ");
                    this.visit(node.initVal);
                });
            }
        });
    }

    void visit(CExpressionNode node)
    {
        import std.stdio;
        node.match(
            (CLiteralNode x){
                this.printf("%s", x.match(
                                   (StringLiteral x) => "\"%s\"".format(x.value),
                                   (CharLiteral x)   => "\'" ~ x.value ~ "\'",
                                   (IntLiteral x)    => x.value.to!string)
                );
            },
            (CIdentifierNode n){
                this.printf("%s", n.name);
            },
            (CCallNode n){
                this.visit(n.toCall);
                this.untabbed({
                    this.printf("(");
                    n.arguments.headLast!((x){ this.visit(x); this.printf(", "); },
                                          (k){ this.visit(k); });
                    this.printf(")");
                });
            }
        );
    }

    void visit(CTypedefNode node)
    {
        this.printfln("typedef %s", node.ctype.typeString(node.totype));
    }
};
